import _extends from '@babel/runtime/helpers/esm/extends';
import _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';
import { forwardRef, useEffect, createElement } from 'react';
import { useThree, useFrame } from 'react-three-fiber';
import useEffectfulState from '../helpers/useEffectfulState.js';
import { MapControls as MapControls$1 } from 'three/examples/jsm/controls/OrbitControls';

const MapControls = /*#__PURE__*/forwardRef((props = {
  enableDamping: true
}, ref) => {
  const {
    camera
  } = props,
        rest = _objectWithoutPropertiesLoose(props, ["camera"]);

  const {
    camera: defaultCamera,
    gl,
    invalidate
  } = useThree();
  const explCamera = camera || defaultCamera;
  const controls = useEffectfulState(() => {
    if (explCamera) {
      return new MapControls$1(explCamera, gl.domElement);
    }
  }, [explCamera, gl], ref);
  useFrame(() => controls == null ? void 0 : controls.update());
  useEffect(() => {
    controls == null ? void 0 : controls.addEventListener == null ? void 0 : controls.addEventListener('change', invalidate);
    return () => controls == null ? void 0 : controls.removeEventListener == null ? void 0 : controls.removeEventListener('change', invalidate);
  }, [controls, invalidate]);
  return controls ? /*#__PURE__*/createElement("primitive", _extends({
    dispose: undefined,
    object: controls,
    enableDamping: true
  }, rest)) : null;
});

export { MapControls };
