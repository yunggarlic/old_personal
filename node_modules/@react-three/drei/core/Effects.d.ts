import * as React from 'react';
import { ReactThreeFiber } from 'react-three-fiber';
import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';
import { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';
import { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass';
declare type Props = ReactThreeFiber.Node<EffectComposer, typeof EffectComposer> & {
    multisamping?: number;
    renderIndex?: number;
    disableGamma?: boolean;
    disableRenderPass?: boolean;
};
declare global {
    namespace JSX {
        interface IntrinsicElements {
            effectComposer: ReactThreeFiber.Node<EffectComposer, typeof EffectComposer>;
            renderPass: ReactThreeFiber.Node<RenderPass, typeof RenderPass>;
            shaderPass: ReactThreeFiber.Node<ShaderPass, typeof ShaderPass>;
        }
    }
}
export declare const isWebGL2Available: () => boolean;
export declare const Effects: React.ForwardRefExoticComponent<Pick<Props, "attach" | "attachArray" | "attachObject" | "args" | "children" | "key" | "onUpdate" | "reset" | "render" | "renderer" | "renderTarget1" | "renderTarget2" | "writeBuffer" | "readBuffer" | "passes" | "copyPass" | "clock" | "renderToScreen" | "swapBuffers" | "addPass" | "insertPass" | "removePass" | "isLastEnabledPass" | "setSize" | "setPixelRatio" | "multisamping" | "renderIndex" | "disableGamma" | "disableRenderPass"> & React.RefAttributes<unknown>>;
export {};
