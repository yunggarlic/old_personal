import _extends from '@babel/runtime/helpers/esm/extends';
import _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';
import { forwardRef, useRef, useLayoutEffect, useEffect, createElement, Fragment } from 'react';
import { useThree } from 'react-three-fiber';
import useEffectfulState from '../helpers/useEffectfulState.js';
import { TransformControls as TransformControls$1 } from 'three/examples/jsm/controls/TransformControls';
import pick from 'lodash.pick';
import omit from 'lodash.omit';

const TransformControls = /*#__PURE__*/forwardRef((_ref, ref) => {
  let {
    children
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["children"]);

  const transformOnlyPropNames = ['enabled', 'axis', 'mode', 'translationSnap', 'rotationSnap', 'scaleSnap', 'space', 'size', 'dragging', 'showX', 'showY', 'showZ'];

  const {
    camera
  } = props,
        rest = _objectWithoutPropertiesLoose(props, ["camera"]);

  const transformProps = pick(rest, transformOnlyPropNames);
  const objectProps = omit(rest, transformOnlyPropNames);
  const {
    camera: defaultCamera,
    gl,
    invalidate
  } = useThree();
  const explCamera = camera || defaultCamera;
  const controls = useEffectfulState(() => {
    if (explCamera) {
      return new TransformControls$1(explCamera, gl.domElement);
    }
  }, [explCamera, gl.domElement], ref);
  const group = useRef();
  useLayoutEffect(() => void (controls == null ? void 0 : controls.attach(group.current)), [children, controls]);
  useEffect(() => {
    controls == null ? void 0 : controls.addEventListener == null ? void 0 : controls.addEventListener('change', invalidate);
    return () => controls == null ? void 0 : controls.removeEventListener == null ? void 0 : controls.removeEventListener('change', invalidate);
  }, [controls, invalidate]);
  return controls ? /*#__PURE__*/createElement(Fragment, null, /*#__PURE__*/createElement("primitive", _extends({
    dispose: undefined,
    object: controls
  }, transformProps)), /*#__PURE__*/createElement("group", _extends({
    ref: group
  }, objectProps), children)) : null;
});

export { TransformControls };
